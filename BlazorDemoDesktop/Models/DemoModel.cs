using Kenova.WebAssembly.Client.Components;
using System;
using System.Threading.Tasks;

namespace BlazorDesktopDemo
{
    public partial class DemoModel
    {
        private string __CurrentOption = "one";
        private bool __PumpActive = true;

        public string SelectedString = "Fred Pietersen";
        public DateTime SelectedDate = DateTime.Now;
        public Decimal SelectedDecimal = 7998.76m;


        private string __name;


        public bool SomeBooleanProperty { get; set; }
        public DateTime? SomeDateTimeProperty { get; set; }
        public int SomeIntegerProperty { get; set; }
        public decimal SomeDecimalProperty { get; set; }
        public string SomeStringProperty { get; set; }
        public string SomeMultiLineStringProperty { get; set; }
        public SomeStateEnum SomeSelectProperty { get; set; } = SomeStateEnum.Active;

        public DemoModel()
        { 
            Register(m => m.CurrentOption);
            Register(m => m.SelectedString);
            Register(m => m.SelectedDate);
            Register(m => m.SelectedDecimal);
            Register(m => m.PumpActive);
        }

        protected override async Task ValidateEventAsync(ValidateEventArgs<DemoModel> e)
        {
            if (e.IsMember(m => m.CurrentOption))
            {
                await Task.CompletedTask;
                return;
            }

            if (e.IsMember(m => m.PumpActive))
            {
                await Task.CompletedTask;
                return;
            }
        }

    }

    public enum SomeStateEnum
    {
        Pending,
        Active,
        Suspended
    }
}

namespace BlazorDesktopDemo
{
    public partial class DemoModel : ModelTypedBase<DemoModel>
    {

        /// <summary>
        /// Property generated by Kenova.SourceGenerators
        /// </summary>
        public string CurrentOption
        {
            get { return this.__CurrentOption; }
            set
            {
                this.__CurrentOption = value;
                this.NotifyPropertyChanged(nameof(CurrentOption));
            }
        }

        /// <summary>
        /// Property generated by Kenova.SourceGenerators
        /// </summary>
        public bool PumpActive
        {
            get { return this.__PumpActive; }
            set
            {
                this.__PumpActive = value;
                this.NotifyPropertyChanged(nameof(PumpActive));
            }
        }

        /// <summary>
        /// Property generated by Kenova.SourceGenerators
        /// </summary>
        public string name
        {
            get { return this.__name; }
            set
            {
                this.__name = value;
                this.NotifyPropertyChanged(nameof(name));
            }
        }
    }
}
