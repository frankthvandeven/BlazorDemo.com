@namespace Kenova.Client.Components
@inherits KenovaComponentBase
@using System.Text

@{
    //if (KenovaClientConfig.Diagnostics) Console.WriteLine("RENDER INPUTBASE");

    string captionStyle = this.CaptionWidth == -1 ? null : $"width:{this.CaptionWidth.ToPixels()}";
    string inputboxStyle = this.InputBoxWidth == -1 ? null : $"width:{this.InputBoxWidth.ToPixels()}";
    string remarkStyle = this.RemarkWidth == -1 ? null : $"width:{this.RemarkWidth.ToPixels()}";

    double col0_width = -1;
    double col1_width = -1;
    double col2_width = -1;

    bool col0_containerwidth = false;
    bool col1_containerwidth = false;
    bool col2_containerwidth = false;

    bool has_col0 = false;
    bool has_col2 = false;

    if (this.Caption != null)
    {
        if (this.CaptionLeft)
        {
            has_col0 = true;
            col0_width = this.CaptionWidth;

            if (this.CaptionWidth == -1) col0_containerwidth = true;
        }
        else
        {
            col1_width = this.CaptionWidth;

            if (this.CaptionWidth == -1) col1_containerwidth = true;
        }
    }

    if (this.InputBoxWidth > col1_width) col1_width = this.InputBoxWidth;
    if (this.InputBoxWidth == -1) col1_containerwidth = true;

    if (this.HideRemark == false && FieldLink.Registered == true)
    {
        if (this.RemarkRight)
        {
            has_col2 = true;
            if (this.RemarkWidth > col2_width) col2_width = this.RemarkWidth;
            if (this.RemarkWidth == -1) col2_containerwidth = true;
        }
        else
        {
            if (this.RemarkWidth > col1_width) col1_width = this.RemarkWidth;
            if (this.RemarkWidth == -1) col1_containerwidth = true;
        }
    }

    string col0 = "1fr";

    if (has_col0 == false)
    {
        col0 = "0px";
    }
    else if (col0_containerwidth == false)
    {
        col0 = col0_width.ToPixels();
    }

    string col1 = "1fr";

    if (col1_containerwidth == false)
    {
        col1 = col1_width.ToPixels();
    }

    string col2 = "1fr";

    if (has_col2 == false)
    {
        col2 = "0px";
    }
    else if (col2_containerwidth == false)
    {
        col2 = col2_width.ToPixels();
    }

    containerStyle.Clear();

    if (this.Width == -1)
        containerStyle.Append("width:100%;");
    else
        containerStyle.Append($"width:{this.Width.ToPixels()};");

    if (this.MaxWidth != -1)
        containerStyle.Append($"max-width:{this.MaxWidth.ToPixels()};");

    containerStyle.Append($"grid-template-columns: {col0} {col1} {col2};");

    if (this.AdditionalStyle != null)
        containerStyle.Append(this.AdditionalStyle);

    string textareaStyle = null;

    if (this.TextMaxHeight != -1)
        textareaStyle = $"max-height:{this.TextMaxHeight.ToPixels()};";

    string enabledClass = "enabled";

    if (this.Enabled == false)
        enabledClass = "disabled";

    string displaycomponentClass = null;

    if (_act_as_displaycomponent)
        displaycomponentClass = "displaycomponent";

}

<div class="kn-inputbase-container" style="@containerStyle">

    @if (Caption != null)
    {
        <div class="kn-inputbase-caption @(this.CaptionLeft ? "left" : "top" )" style="@captionStyle">
            <span>@Caption</span>
        </div>
    }

    <div id="@InputboxContainerId"
         class="kn-inputbase-borderbox multiline @displaycomponentClass @enabledClass"
         style="@inputboxStyle">

        <textarea class="kn-inputbox-textarea-element @enabledClass" style="@textareaStyle"
                  value="@this.Text"
                  type="text"
                  id="@InputElementId"
                  readonly="@(this.ReadOnly || this._act_as_displaycomponent ? true : false)"
                  placeholder="@Placeholder"
                  rows="@Rows"
                  tabindex="@(this._act_as_displaycomponent ? -1 : 0)"
                  spellcheck="false"
                  disabled="@(this.Enabled == false ? true : null)"
                  @onfocus="TextBox_GotFocus"
                  @onblur="TextBox_LostFocus"
                  @oninput="TextBox_OnInput" />

    </div>

    @if (this.HideRemark == false && FieldLink.Registered)
    {
        <div class="kn-inputbase-remarkarea @(this.RemarkRight ? "right" : "bottom" )"
             style="@remarkStyle">
            <Remark Model="@FieldLink.Model" PropertyName="@FieldLink.PropertyName" WordWrap="@(this.RemarkRight ? false : true )" />
        </div>
    }

</div>



