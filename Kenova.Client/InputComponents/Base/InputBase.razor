@namespace Kenova.Client.Components
@typeparam TValue
@inherits KenovaComponentBase
@using System.Text
@using System.Linq.Expressions

@{
    //if (KenovaClientConfig.Diagnostics) Console.WriteLine("RENDER INPUTBASE");

    string captionStyle = this.CaptionWidth == -1 ? null : $"width:{this.CaptionWidth.ToPixels()}";
    string inputboxStyle = this.InputBoxWidth == -1 ? null : $"width:{this.InputBoxWidth.ToPixels()}";
    string remarkStyle = this.RemarkWidth == -1 ? null : $"width:{this.RemarkWidth.ToPixels()}";

    double col0_width = -1;
    double col1_width = -1;
    double col2_width = -1;

    bool col0_containerwidth = false;
    bool col1_containerwidth = false;
    bool col2_containerwidth = false;

    bool has_col0 = false;
    bool has_col2 = false;

    if (this.Caption != null)
    {
        if (this.CaptionLeft)
        {
            has_col0 = true;
            col0_width = this.CaptionWidth;

            if (this.CaptionWidth == -1) col0_containerwidth = true;
        }
        else
        {
            col1_width = this.CaptionWidth;

            if (this.CaptionWidth == -1) col1_containerwidth = true;
        }
    }

    if (this.InputBoxWidth > col1_width) col1_width = this.InputBoxWidth;
    if (this.InputBoxWidth == -1) col1_containerwidth = true;

    if (this.HideRemark == false && FieldLink.Registered == true)
    {
        if (this.RemarkRight)
        {
            has_col2 = true;
            if (this.RemarkWidth > col2_width) col2_width = this.RemarkWidth;
            if (this.RemarkWidth == -1) col2_containerwidth = true;
        }
        else
        {
            if (this.RemarkWidth > col1_width) col1_width = this.RemarkWidth;
            if (this.RemarkWidth == -1) col1_containerwidth = true;
        }
    }

    string col0 = "1fr";

    if (has_col0 == false)
    {
        col0 = "0px";
    }
    else if (col0_containerwidth == false)
    {
        col0 = col0_width.ToPixels();
    }

    string col1 = "1fr";

    if (col1_containerwidth == false)
    {
        col1 = col1_width.ToPixels();
    }

    string col2 = "1fr";

    if (has_col2 == false)
    {
        col2 = "0px";
    }
    else if (col2_containerwidth == false)
    {
        col2 = col2_width.ToPixels();
    }

    containerStyle.Clear();

    if (this.Width == -1)
        containerStyle.Append("width:100%;");
    else
        containerStyle.Append($"width:{this.Width.ToPixels()};");

    if (this.MaxWidth != -1)
        containerStyle.Append($"max-width:{this.MaxWidth.ToPixels()};");

    containerStyle.Append($"grid-template-columns: {col0} {col1} {col2};");

    if (this.AdditionalStyle != null)
        containerStyle.Append(this.AdditionalStyle);

    string enabledClass = "enabled";
    string tabIndex = "-1";

    if (this.Enabled == false)
    {
        tabIndex = null;
        enabledClass = "disabled";
    }

    string showhandClass = "";

    if (NoInputElement && !_act_as_displaycomponent && this.IsSingleActionButtonActive())
        showhandClass = "showhand";

    string input_type = "text";

    if (IsPassword)
        input_type = "password";

    string displaycomponentClass = null;

    if (_act_as_displaycomponent)
        displaycomponentClass = "displaycomponent";

}

<div class="kn-inputbase-container" style="@containerStyle">

    @if (Caption != null)
    {
        <div class="kn-inputbase-caption @(this.CaptionLeft ? "left" : "top" )" style="@captionStyle">
            <span>@Caption</span>
        </div>
    }

    <div id="@InputboxContainerId"
         class="kn-inputbase-borderbox @showhandClass @displaycomponentClass @enabledClass"
         style="@inputboxStyle"
         @onclick="Container_Div_ClickedAsync">

        @if (ShowSearchIcon)
        {
            <div class="kn-inputbox-image search @enabledClass" tabindex="@tabIndex">
                <svg viewBox="0 0 16 16">
                    <path d="M10.5 0l1.5.2a3.8 3.8 0 0 1 1.3.6l1.1.8.9 1.1a6.9 6.9 0 0 1 .5 1.3 7.7 7.7 0 0 1 .2 1.5 7.7 7.7 0 0 1-.2 1.5 6.9 6.9 0 0 1-.5 1.3l-.9 1.1-1.1.9-1.3.5-1.5.2a5.8 5.8 0 0 1-1.9-.3 5.4 5.4 0 0 1-1.6-1L.9 15.9H.1a.8.8 0 0 1 0-.8L6.3 9a5.4 5.4 0 0 1-1-1.6A5.8 5.8 0 0 1 5 5.5 7.7 7.7 0 0 1 5.2 4a3.8 3.8 0 0 1 .6-1.3 4.4 4.4 0 0 1 .8-1.1L7.7.8A3.8 3.8 0 0 1 9 .2zm0 10a3.9 3.9 0 0 0 1.8-.4 4.2 4.2 0 0 0 1.4-.9 4.2 4.2 0 0 0 .9-1.4 3.9 3.9 0 0 0 .4-1.8 3.3 3.3 0 0 0-.4-1.7 3.8 3.8 0 0 0-.9-1.5 4.2 4.2 0 0 0-1.4-.9 3.9 3.9 0 0 0-1.8-.4 3.3 3.3 0 0 0-1.7.4 3.8 3.8 0 0 0-1.5.9 3.8 3.8 0 0 0-.9 1.5A3.3 3.3 0 0 0 6 5.5a3.9 3.9 0 0 0 .4 1.8 4.2 4.2 0 0 0 .9 1.4 3.8 3.8 0 0 0 1.5.9 3.3 3.3 0 0 0 1.7.4z"></path>
                </svg>
            </div>
        }

        @if (Enabled == false)
        {
            <span class="kn-inputbox-span-element disabled">@Text</span>
        }
        else if (_act_as_displaycomponent)
        {
            <input class="kn-inputbox-input-element @enabledClass"
                   value="@this.Text"
                   readonly="@true"
                   tabindex="-1"
                   id="@InputElementId"
                   type="text" />
        }
        else
        {
            if (NoInputElement)
            {
                <span tabindex="0"
                      id="@InputElementId"
                      class="kn-inputbox-span-element enabled">@Text</span>
            }
            else
            {
                <input class="kn-inputbox-input-element"
                       value="@this.Text"
                       readonly="@ReadOnly"
                       id="@InputElementId"
                       tabindex="0"
                       placeholder="@Placeholder"
                       type="@input_type"
                       spellcheck="false"
                       autocomplete="@AutoComplete"
                       @onfocus="TextBox_GotFocus"
                       @onblur="TextBox_LostFocus"
                       @oninput="TextBox_OnInput" />
            }
        }

        @if (this.Suffix != null)
        {
            <div class="kn-inputbox-suffix @enabledClass" tabindex="@tabIndex" @onclick="Suffix_Div_Clicked">@this.Suffix</div>
        }

        @if (ShowClearButton == true && NoInputElement == false && Enabled == true && ReadOnly == false
&& !_act_as_displaycomponent && this.Text.Length > 0)
        {
            <div class="kn-inputbox-image cleartext @enabledClass" tabindex="@tabIndex"
                 @onclick="ClearText_Div_Clicked">
                <svg viewBox="0 0 15.8 15.8">
                    <path d="M8.7 7.9l7.1 7.1-.8.8-7.1-7.1-7.1 7.1L0 15l7.1-7.1L0 .8.8 0l7.1 7.1L15 0l.8.8z"></path>
                </svg>
            </div>
        }

        @if (ShowClipboardButton)
        {
            <div class="kn-inputbox-image zoom @enabledClass" tabindex="@tabIndex" @onclick="Copy_Div_Clicked">

                <svg viewBox="0 0 14 16">
                    <path d="M14 6.3V16H4v-3H0V0h6.7l3 3h1zM4 3h4.3l-2-2H1v11h3zm9 4h-3V4H5v11h8zm-2-1h1.3L11 4.7z" />
                </svg>

            </div>
        }


        @if (ShowZoomButton)
        {
            <div class="kn-inputbox-image zoom @enabledClass" tabindex="@tabIndex" @onclick="Zoom_Div_ClickedAsync">
                <svg viewBox="0 0 512 512">
                    <path d="M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395 312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5 0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17 0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208 32s176 78.7 176 176-78.7 176-176 176z" />
                </svg>
            </div>
        }

        @if (ShowDropdownButton)
        {
            <div class="kn-inputbox-image dropdown @(DropdownOpen ? " flip" : "") @enabledClass"
                 tabindex="@tabIndex" @onclick="async () => await Dropdown_Div_ClickedAsync()">
                <svg viewBox="0 0 14.7 8.1">
                    <path d="M.7 0l6.7 6.6L14 0l.7.7-7.3 7.4L0 .7.7 0z"></path>
                </svg>
            </div>
        }


    </div>

    @if (this.HideRemark == false && FieldLink.Registered)
    {
        <div class="kn-inputbase-remarkarea @(this.RemarkRight ? "right" : "bottom" )"
             style="@remarkStyle">
            <Remark Model="@FieldLink.Model" PropertyName="@FieldLink.PropertyName" WordWrap="@(this.RemarkRight ? false : true )" />
        </div>
    }

</div>
